{
    "problems": [
{
    "contestId": 1935,
    "index": "F",
    "name": "Andrey's Tree",
    "type": "PROGRAMMING",
    "points": 3000.0,
    "rating": 2800,
    "tags": [
        "binary search",
        "constructive algorithms",
        "data structures",
        "dfs and similar",
        "dsu",
        "greedy",
        "implementation",
        "trees"
    ]
},
{
    "contestId": 1923,
    "index": "F",
    "name": "Shrink-Reverse",
    "type": "PROGRAMMING",
    "rating": 2800,
    "tags": [
        "binary search",
        "brute force",
        "greedy",
        "hashing",
        "implementation",
        "string suffix structures",
        "strings"
    ]
},
{
    "contestId": 1904,
    "index": "F",
    "name": "Beautiful Tree",
    "type": "PROGRAMMING",
    "points": 3500.0,
    "rating": 2800,
    "tags": [
        "data structures",
        "dfs and similar",
        "graphs",
        "implementation",
        "trees"
    ]
},
{
    "contestId": 1900,
    "index": "F",
    "name": "Local Deletions",
    "type": "PROGRAMMING",
    "points": 3000.0,
    "rating": 2800,
    "tags": [
        "binary search",
        "data structures",
        "implementation"
    ]
},
{
    "contestId": 1884,
    "index": "E",
    "name": "Hard Design",
    "type": "PROGRAMMING",
    "points": 3000.0,
    "rating": 2800,
    "tags": [
        "greedy",
        "implementation",
        "math"
    ]
},
{
    "contestId": 1783,
    "index": "G",
    "name": "Weighed Tree Radius",
    "type": "PROGRAMMING",
    "rating": 2800,
    "tags": [
        "data structures",
        "divide and conquer",
        "implementation",
        "trees"
    ]
},
{
    "contestId": 1765,
    "index": "I",
    "name": "Infinite Chess",
    "type": "PROGRAMMING",
    "rating": 2800,
    "tags": [
        "implementation",
        "shortest paths"
    ]
},
{
    "contestId": 1698,
    "index": "F",
    "name": "Equal Reversal",
    "type": "PROGRAMMING",
    "points": 2500.0,
    "rating": 2800,
    "tags": [
        "constructive algorithms",
        "graphs",
        "implementation",
        "math"
    ]
},
{
    "contestId": 1697,
    "index": "F",
    "name": "Too Many Constraints",
    "type": "PROGRAMMING",
    "rating": 2800,
    "tags": [
        "2-sat",
        "constructive algorithms",
        "graphs",
        "implementation"
    ]
},
{
    "contestId": 1648,
    "index": "D",
    "name": "Serious Business",
    "type": "PROGRAMMING",
    "points": 2000.0,
    "rating": 2800,
    "tags": [
        "data structures",
        "divide and conquer",
        "dp",
        "implementation",
        "shortest paths"
    ]
},
{
    "contestId": 1608,
    "index": "E",
    "name": "The Cells on the Paper",
    "type": "PROGRAMMING",
    "points": 2000.0,
    "rating": 2800,
    "tags": [
        "binary search",
        "implementation",
        "sortings"
    ]
},
{
    "contestId": 1578,
    "index": "K",
    "name": "Kingdom of Islands",
    "type": "PROGRAMMING",
    "rating": 2800,
    "tags": [
        "brute force",
        "graphs",
        "implementation"
    ]
},
{
    "contestId": 1419,
    "index": "F",
    "name": "Rain of Fire",
    "type": "PROGRAMMING",
    "points": 3000.0,
    "rating": 2800,
    "tags": [
        "binary search",
        "data structures",
        "dfs and similar",
        "dsu",
        "graphs",
        "implementation"
    ]
},
{
    "contestId": 1393,
    "index": "E1",
    "name": "Twilight and Ancient Scroll (easier version)",
    "type": "PROGRAMMING",
    "points": 1500.0,
    "rating": 2800,
    "tags": [
        "dp",
        "hashing",
        "implementation",
        "string suffix structures",
        "strings"
    ]
},
{
    "contestId": 1371,
    "index": "F",
    "name": "Raging Thunder",
    "type": "PROGRAMMING",
    "points": 3000.0,
    "rating": 2800,
    "tags": [
        "data structures",
        "divide and conquer",
        "implementation"
    ]
},
{
    "contestId": 1303,
    "index": "F",
    "name": "Number of Components",
    "type": "PROGRAMMING",
    "rating": 2800,
    "tags": [
        "dsu",
        "implementation"
    ]
},
{
    "contestId": 1109,
    "index": "C",
    "name": "Sasha and a Patient Friend",
    "type": "PROGRAMMING",
    "points": 1750.0,
    "rating": 2800,
    "tags": [
        "binary search",
        "data structures",
        "implementation"
    ]
},
{
    "contestId": 833,
    "index": "D",
    "name": "Red-Black Cobweb",
    "type": "PROGRAMMING",
    "points": 2250.0,
    "rating": 2800,
    "tags": [
        "data structures",
        "divide and conquer",
        "implementation",
        "trees"
    ]
},
{
    "contestId": 776,
    "index": "F",
    "name": "Sherlock's bet to Moriarty",
    "type": "PROGRAMMING",
    "points": 3000.0,
    "rating": 2800,
    "tags": [
        "constructive algorithms",
        "data structures",
        "divide and conquer",
        "geometry",
        "graphs",
        "implementation",
        "trees"
    ]
},
{
    "contestId": 750,
    "index": "F",
    "name": "New Year and Finding Roots",
    "type": "PROGRAMMING",
    "points": 3000.0,
    "rating": 2800,
    "tags": [
        "constructive algorithms",
        "implementation",
        "interactive",
        "trees"
    ]
},
{
    "contestId": 722,
    "index": "F",
    "name": "Cyclic Cipher",
    "type": "PROGRAMMING",
    "points": 2500.0,
    "rating": 2800,
    "tags": [
        "chinese remainder theorem",
        "data structures",
        "implementation",
        "number theory",
        "two pointers"
    ]
},
{
    "contestId": 472,
    "index": "E",
    "name": "Design Tutorial: Learn from a Game",
    "type": "PROGRAMMING",
    "points": 3000.0,
    "rating": 2800,
    "tags": [
        "constructive algorithms",
        "implementation"
    ]
},
{
    "contestId": 406,
    "index": "E",
    "name": "Hamming Triples",
    "type": "PROGRAMMING",
    "points": 2500.0,
    "rating": 2800,
    "tags": [
        "implementation",
        "math",
        "two pointers"
    ]
},
{
    "contestId": 288,
    "index": "E",
    "name": "Polo the Penguin and Lucky Numbers",
    "type": "PROGRAMMING",
    "points": 2500.0,
    "rating": 2800,
    "tags": [
        "dp",
        "implementation",
        "math"
    ]
},
{
    "contestId": 280,
    "index": "D",
    "name": "k-Maximum Subsequence Sum",
    "type": "PROGRAMMING",
    "points": 2000.0,
    "rating": 2800,
    "tags": [
        "data structures",
        "flows",
        "graphs",
        "implementation"
    ]
},
{
    "contestId": 204,
    "index": "E",
    "name": "Little Elephant and Strings",
    "type": "PROGRAMMING",
    "points": 2500.0,
    "rating": 2800,
    "tags": [
        "data structures",
        "implementation",
        "string suffix structures",
        "two pointers"
    ]
}
]
}
